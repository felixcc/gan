{"name":"Gan","tagline":"GrooveAdmiN is a light weight debugging/management tool embedded in Java web applications.","body":"# GrooveAdmiN\r\nGrooveAdmiN 是一个简单轻便的Java Web工程管理工具\r\n\r\n你可以使用它上传本地的groovy文件并在你的服务器上执行\r\n\r\n使用GrooveAdmiN，你可以借助强大的动态语言来简化你的工作\r\n\r\n## 特性\r\n\r\n- 在服务器端执行本地的脚本文件\r\n- 轻便，几乎没有额外依赖，可以被轻松的整合到你的项目中\r\n- 符合Restful语义\r\n- 提供基于Bash的客户端，使用curl命令就可以安装 \r\n- 可以管理正在运行的任务\r\n- 易于定制和扩展\r\n\r\n##使用说明\r\n\r\n### 将GrooveAdmiN整合到你的项目中\r\n\r\n1.在你的classpath下加入如下依赖\r\n\r\n- [GrooveAdmiN](https://oss.sonatype.org/service/local/repositories/snapshots/content/com/github/safrain/gan/1.0-SNAPSHOT/gan-1.0-20131010.060527-1.jar)\r\n- [Groovy Runtime](http://groovy.codehaus.org/Download) 任意高于1.8.6的版本皆可\r\n\r\n对于Maven管理的项目，把如下内容加入你的pom中\r\n\r\n\t<dependency>\r\n\t\t<groupId>com.github.safrain</groupId>\r\n\t\t<artifactId>gan</artifactId>\r\n\t\t<version>1.0</version>\r\n\t</dependency>\r\n\r\n\t<dependency>\r\n\t\t<groupId>org.codehaus.groovy</groupId>\r\n\t\t<artifactId>groovy-all</artifactId>\r\n\t\t<version>1.8.9</version>\r\n\t</dependency>\r\n\r\n2.在你的 *web.xml* 加入GANFilter\r\n\r\n**当心:直接暴露这个Filter可能会导致严重的安全问题，请考虑限制客户端IP或配合有身份验证功能的Filter使用**\r\n\r\n\t<filter>\r\n\t\t<filter-name>GAN</filter-name>\r\n\t\t<filter-class>com.github.safrain.gan.GANFilter</filter-class>\r\n\t</filter>\r\n\t<filter-mapping>\r\n\t\t<filter-name>GAN</filter-name>\r\n\t\t<url-pattern>/gan</url-pattern>\r\n\t</filter-mapping>\r\n\r\n**Filter 初始化参数**\r\n\r\n*charset* 请求和响应的编码， 默认为 'utf-8'\r\n\r\n\r\n### 使用 GrooveAdmiN\r\n\r\n#### 显示帮助信息\r\n对 GANFilter 所在的路径进行HTTP GET，可以显示帮助信息\r\n\r\n    curl -s http://localhost/gan\r\n\r\n####上传脚本并执行 \r\n对 GANFilter 所在的路径进行HTTP POST, 脚本会在服务器端被执行\r\n\r\n    curl -X POST http://localhost/gan -T foo.groovy\r\n\r\n或直接上传脚本内容\r\n\r\n    curl -X POST http://localhost/gan -d \"println 'Hello'\"\r\n\r\n####输出到Response\r\n\r\n直接使用 println 输出到 Response， 脚本环境中的 *stdout* 和 *stderr* 都已经被重定向到 Response 中\r\n    \r\n    println 'Hello GrooveAdmiN'\r\n\r\n####获得请求参数\r\n\r\n就像在Java中一样，使用脚本环境中的内置变量即可\r\n\r\n    println _request.getParameter('foo')\r\n    \r\n####访问/操作 Spring 环境\r\n\r\n参考下面的 *扩展* 部分\r\n\r\n**脚本环境中的内置变量**\r\n\r\n*_request* Http请求\r\n\r\n*_response* Http响应\r\n\r\n*\\_servlet\\_context* Servlet上下文\r\n\r\n*_this* GANFilter 本身\r\n\r\n*_engine* 运行当前脚本的 javax.script.ScriptEngine\r\n\r\n\r\n### 使用Bash客户端\r\n\r\n假设你把 GANFilter 配置在了 http://localhost/ 的项目中, '/gan' 作为GANFilter的路径:\r\n\r\n#### 安装\r\n\r\n\tcurl -s http://localhost/gan?install | bash\r\n\r\nGrooveAdmiN 的bash 客户端 'gan' 会被下载到当前目录中，当前的服务器地址会被用作默认服务器地址(存储在 ~/.gan_host中)\r\n\r\n#### 上传脚本并执行\r\n\r\n\t./gan foo.groovy\r\n\r\n#### 指定服务器地址并将其保存为默认地址\r\n\r\n脚本会在 <server address> 上被执行, 客户端的默认地址会被修改为 <server address>\r\n\r\n    ./gan -h <server address> foo.groovy\r\n\r\n#### 运行中脚本列表\r\n    \r\n    ./gan -l\r\n    \r\n#### 结束运行中的脚本\r\n\r\n    ./gan -k uuid\r\n\r\n\r\n### 扩展\r\n\r\n#### 脚本扩展\r\n*脚本扩展* 会在你上传的脚本执行前被执行，在脚本扩展中，你可以在脚本环境中定义一些变量和方法，用来支持各种框架，或者放一些你常用的工具方法\r\n\r\n下面是一些默认的扩展功能\r\n\r\n**任务管理** (com/github/safrain/gan/task.groovy)\r\n\r\n显示所有运行中的脚本\r\n\r\n    _gan_running()\r\n\r\n停止运行中的脚本\r\n\r\n    _gan_kill('uuid')\r\n\r\n**Spring支持** (com/github/safrain/gan/spring.groovy)\r\n\r\n访问Spring环境中的bean\r\n    \r\n    def someBean = beans.beanName\r\n    def anotherBean = beans['beanName']\r\n    \r\n显示所有定义在Spring环境中的bean\r\n\r\n    println beans\r\n    \r\n访问Spring环境\r\n\r\n    println beans.context\r\n\r\n###定制\r\n\r\n下面的 com.github.safrain.gan.GANFilter 中的若干方法, 是被设计用来被覆盖的，以实现方便的定制\r\n\r\n* **createScriptEngine** 返回你自己的脚本引擎，用来支持其他的语言，例如Scala，Javascript等\r\n* **getScriptBeforeEvaluation** 返回你自己的脚本扩展列表\r\n* **getWelcomeScreen** 返回你自定义的帮助信息\r\n* **getInstallScript** 返回客户端安装脚本\r\n* **getClient** 返回你定制的客户端\r\n* **getReplacements** 返回帮助信息和客户端中需要被替换的键值对，例如服务器地址\r\n\r\n## 试一下？\r\n\r\n你需要安装 [gradle](http://www.gradle.org/) 来构建和运行示例项目\r\n    \r\n从git clone项目\r\n\r\n    git clone git@github.com:safrain/gan.git\r\n\r\n在Jetty中运行项目\r\n\r\n    gradle jettyRunWar\r\n    \r\n然后显示帮助信息，按照其中的提示做就可以了\r\n   \r\n    curl localhost:8080/gan\r\n\r\n## TODOs\r\n\r\n* 客户端支持HTTP 基本认证和 HTTP 摘要认证\r\n\r\n\r\n# GrooveAdmiN\r\nGrooveAdmiN is a light weight debugging/management tool embedded in Java web applications.\r\n\r\nYou can upload local groovy script file and run it on your server.\r\n\r\nThrough GrooveAdmiN, you can do your management work easily with the power of dynamic language.\r\n\r\n## Features\r\n\r\n- Upload local script file and run it on server\r\n- Lightweight, minimum dependencies, easy to embed into your project\r\n- GrooveAdmiN is Restful \r\n- Bash client, curl to install, one command get everything done\r\n- Running task management\r\n- Easy to extend and customize\r\n\r\n## User Guide\r\n\r\n### Embbed GrooveAdmiN in you project\r\n\r\n1.Add following jars into you classpath\r\n\r\n- [GrooveAdmiN](https://oss.sonatype.org/service/local/repositories/snapshots/content/com/github/safrain/gan/1.0-SNAPSHOT/gan-1.0-20131010.060527-1.jar)\r\n- [Groovy Runtime](http://groovy.codehaus.org/Download) Any version greater than 1.8.6 is OK \r\n\r\nFor maven projects, add below content into you pom\r\n\r\n\t<dependency>\r\n\t\t<groupId>com.github.safrain</groupId>\r\n\t\t<artifactId>gan</artifactId>\r\n\t\t<version>1.0</version>\r\n\t</dependency>\r\n\r\n\t<dependency>\r\n\t\t<groupId>org.codehaus.groovy</groupId>\r\n\t\t<artifactId>groovy-all</artifactId>\r\n\t\t<version>1.8.9</version>\r\n\t</dependency>\r\n            \r\n2.Add GANFilter configuration into your *web.xml*\r\n\r\n**Attention:Exposing this filter may cause serious security problems, consider restrict remote address or add an authentication filter**\r\n\r\n\t<filter>\r\n\t\t<filter-name>GAN</filter-name>\r\n\t\t<filter-class>com.github.safrain.gan.GANFilter</filter-class>\r\n\t</filter>\r\n\t<filter-mapping>\r\n\t\t<filter-name>GAN</filter-name>\r\n\t\t<url-pattern>/gan</url-pattern>\r\n\t</filter-mapping>\r\n\r\n**Filter init params**\r\n\r\n*charset* Request and Response character encoding, 'utf-8' as default.\r\n\r\n\r\n### Using GrooveAdmiN\r\n\r\n#### Show help screen\r\nYou could get some help by using an http GET on GANFilter\r\n\r\n    curl -s http://localhost/gan\r\n\r\n####Upload a script \r\nUse an http POST on GANFilter with a file, the file will be executed on server\r\n\r\n    curl -X POST http://localhost/gan -T foo.groovy\r\n\r\nor\r\n\r\n    curl -X POST http://localhost/gan -d \"println 'Hello'\"\r\n\r\n####Output to servlet response\r\nUse println to directly output to servlet response, *stdout* and *stderr* had been redirected to servlet response\r\n    \r\n    println 'Hello GrooveAdmiN'\r\n\r\n####Get request parameters\r\n\r\nAccess built-in variables, and use them just like in Java\r\n\r\n    println _request.getParameter('foo')\r\n    \r\n####Access/Manipulate spring context\r\n\r\nSee *Extending* section below\r\n\r\n**Built-in variables**\r\n\r\n*_request* Just the request\r\n\r\n*_response* Just the response\r\n\r\n*\\_servlet\\_context* Just the servletContext\r\n\r\n*_this* GANFilter itself\r\n\r\n*_engine* the javax.script.ScriptEngine running current script\r\n\r\n### Using bash client\r\n\r\nAssume that you configured GANFilter in you application at http://localhost/, '/gan' as url pattern:\r\n\r\n#### Install\r\n\r\n\tcurl -s http://localhost/gan?install | bash\r\n\r\nGrooveAdmiN bash client 'gan' will be downloaded to current folder, current server address will be used as default server address of the client(in ~/.gan_host).\r\n\r\n#### Upload script and run\r\n\r\nYou can upload a local script file and execute it on server.\r\n\r\n\t./gan foo.groovy\r\n\r\n#### Specify server address and save it as default server address\r\nScript will be executed at <server address>, and default server address of the client will be changed to <server address>\r\n\r\n    ./gan -h <server address> foo.groovy\r\n\r\n####List running scripts\r\n    \r\n    ./gan -l\r\n    \r\n####Kill running script\r\n\r\n    ./gan -k uuid\r\n\r\n### Extending\r\n\r\n#### Script extensions\r\n*Script Extensions* will be executed before the script you uploaded,\r\nIn the extension script, you can put some variables or function into the script context to add support to various frameworks\r\nOr you can simply put some of your favorite utilities in it.\r\n\r\nHere are some default extensions\r\n\r\n**Task management** (com/github/safrain/gan/task.groovy)\r\n\r\nList all running scripts\r\n\r\n    _gan_running()\r\n\r\nKill running script\r\n\r\n    _gan_kill('uuid')\r\n\r\n**Spring support** (com/github/safrain/gan/spring.groovy)\r\n\r\nAccess beans in spring context\r\n    \r\n    def someBean = beans.beanName\r\n    def anotherBean = beans['beanName']\r\n    \r\nList beans defined in spring context\r\n\r\n    println beans\r\n    \r\nAccess spring application context\r\n\r\n    println beans.context\r\n\r\n###Customizing\r\n\r\nHere are some methods in com.github.safrain.gan.GANFilter, they are designed to be overriden for sake of easy customizing\r\n\r\n* **createScriptEngine** Return your script engine to support some other language, like Javascript, Scala, etc.\r\n* **getScriptBeforeEvaluation** Return your customized extension script list\r\n* **getWelcomeScreen** Return a welcome message while doing http GET on GANFilter\r\n* **getInstallScript** Return bash script using to install the client\r\n* **getClient** Return the customized bash client\r\n* **getReplacements** Return k/v pairs for replacing, like server address\r\n\r\n## Try it now\r\n\r\nYou need [gradle](http://www.gradle.org/) to build/run the example project\r\n    \r\nClone the project\r\n\r\n    git clone git@github.com:safrain/gan.git\r\n\r\nRun the example project in jetty\r\n\r\n    gradle jettyRunWar\r\n    \r\nThen show the welcome screen, and follow its instructions\r\n   \r\n    curl localhost:8080/gan\r\n\r\n## TODOs\r\n\r\n* Support http basic auth and digest auth on bash client\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}